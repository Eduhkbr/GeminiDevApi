name: pipeline
on:
  push:
    branches:
      - main

jobs:
  codeql:
    name: CodeQL analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'java' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4.4.0
        with:
          java-version: 21
          distribution: temurin

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  unit-test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: codeql
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4.4.0
        with:
          java-version: 21
          distribution: temurin

      - name: Run Maven Tests
        run: mvn test

      - name: Generate JaCoCo badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.11.0

      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  build:
    name: Build & Package
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4.4.0
        with:
          java-version: 21
          distribution: temurin

      - name: Package with Maven
        run: mvn package -DskipTests

  container-build:
    name: Build & Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.GOOGLE_ARTIFACT }}
          username: _json_key
          password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build Image
        run: |
          docker build \
            -t ${{ vars.GOOGLE_ARTIFACT }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/${{ vars.GOOGLE_MYAPP }}:latest \
            .

      - name: Push Image
        run: |
          docker push \
            ${{ vars.GOOGLE_ARTIFACT }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/${{ vars.GOOGLE_MYAPP }}:latest

  deploy:
    name: Deploy to Cloud Run
    needs: container-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Cloud Run Deploy
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.GOOGLE_MYAPP }}
          region: ${{ vars.GOOGLE_REGION }}
          image: ${{ vars.GOOGLE_ARTIFACT }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME } }/${{ vars.GOOGLE_MYAPP }}:latest
          allow-unauthenticated: true

      - name: Validate deployment
        run: curl -m 20 "${{ steps.deploy.outputs.url }}"
