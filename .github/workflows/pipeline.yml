name: pipeline
on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: temurin

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-and-test:
    name: Build, Test, Coverage & Sonar
    runs-on: ubuntu-latest
    needs: codeql
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: temurin
          cache: maven       # atalho para cache ~/.m2 se preferir

      - name: Run full Maven pipeline
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify \
            -B \
            -Dspring.profiles.active=prod \
            jacoco:report \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
              -Dsonar.projectKey=Eduhkbr_GeminiDevApi \
              -Dsonar.organization=eduhkbr \
              -Dsonar.qualitygate.wait=true

      - name: Log coverage
        run: echo "Cobertura = $(grep '<counter type=\"INSTRUCTION\"' target/site/jacoco/jacoco.xml)"

      - name: Upload Jacoco report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco/

  docker:
    name: Build & Push Docker
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.GOOGLE_ARTIFACT }}
          username: _json_key
          password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build & Push com cache de camadas
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ vars.GOOGLE_ARTIFACT }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/devapi-service:latest
          cache-from: type=registry,ref=${{ vars.GOOGLE_ARTIFACT }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/cache:latest
          cache-to:   type=registry,ref=${{ vars.GOOGLE_ARTIFACT }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/cache:latest,mode=max

  deploy:
    name: Deploy no Cloud Run
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Autenticar no GCP
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: Deploy no Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: devapi-service
          region: ${{ vars.GOOGLE_REGION }}
          image: ${{ vars.GOOGLE_ARTIFACT }}/${{ secrets.GOOGLE_PROJECT_ID }}/${{ vars.GOOGLE_REPONAME }}/devapi-service:latest
          flags: '--allow-unauthenticated'
          env_vars: |
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            SPRING_PROFILES_ACTIVE=prod

#      - name: Validando a API
#        run: 'curl "${{ steps.deploy.outputs.url }}"'