gemini:
  api:
    base-url: https://generativelanguage.googleapis.com/v1beta
    key: ${GEMINI_API_KEY}
    model-name: gemini-2.0-flash

analysis:
  prompt:
    documentation: |
      Você é um gerador de documentação técnica experiente. Gere um README.md conciso e útil para a classe Java abaixo, em Markdown.
      Nome: %s
      Código:
      ```java
      %s
      ```
      Inclua:
      - Descrição geral da classe
      - Principais métodos públicos e suas funções
      - Exemplo de uso
      - Parâmetros importantes (se houver)
      - Como a classe trata erros

    tests: |
      Gere um esqueleto de teste JUnit 5 para a classe Java abaixo, seguindo boas práticas de nomes de métodos de teste.
      Nome: %s
      Código:
      ```java
      %s
      ```
      Requisitos:
      - Nome do arquivo: <NOME_DA_CLASSE>Test.java
      - Importações JUnit 5
      - Para cada método público, crie:
        - Um método de teste cenário feliz: <metodo>_quandoEntradaValida_entao<Resultado>()
        - Um método de teste de exceção (se aplicável): <metodo>_quandoEntradaInvalida_entao<Excecao>()
      - Cada método deve conter:
        // TODO: Mockar dependências se necessário
        // TODO: Arrange
        // TODO: Act
        // TODO: Assert
      - Não implemente a lógica dos testes, apenas o esqueleto e sugestões.

jwt:
  secret-key: ${JWT_SECRET_KEY}
  expiration: 3600000

server:
  port: 8080